using System;
using System.Data .SqlClient;
using System.Data;

namespace eschool.LibraryClass
{
	/// <summary>
	/// Summary description for IssueBook.
	/// </summary>
	public class IssueBook
	{
		SqlConnection sqcon;
		SqlCommand sqcom;
		SqlDataReader sqred;
		SqlDataAdapter sqdr;
        DataSet ds;

		#region vars & Prop
		string _CandidateID;
		string _Card_No;
		string _Book_ID;
		string _Book_Name;
		string _Date_Of_Issue;
		string _Return_Date;
		string _quantity;
		string _Book_ID1;
		string _PurID;
		public string PurID
		{
			get
			{
				return _PurID;
			}
			set
			{
				_PurID=value;
			}

		}
		public string Book_ID1
		{
			get
			{
				return _Book_ID1;
			}
			set
			{
				_Book_ID1=value;
			}
		}

        
		public string CandidateID
		{
			get
			{
				return _CandidateID;
			}
			set
			{
				_CandidateID=value;
			}
		}

		public string Book_ID
		{
			get
			{
				return _Book_ID;
			}
			set
			{
				_Book_ID=value;
			}
		}

		public string Card_No
		{
			get
			{
				return _Card_No;
			}
			set
			{
				_Card_No=value;
			}
		}

		public string Book_Name
		{
			get
			{
				return _Book_Name;
			}
			set
			{
				_Book_Name=value;
			}
		}

		public string Date_Of_Issue
		{
			get
			{
				return _Date_Of_Issue;
			}
			set
			{
				_Date_Of_Issue=value;
			}
		}

		public string Return_Date
		{
			get
			{
				return _Return_Date;
			}
			set
			{
				_Return_Date=value;
			}
		}

		public string quantity
		{
			get
			{
				return _quantity;
			}
			set
			{
				_quantity=value;
			}
		}
		#endregion
		//For Connection 
		public IssueBook()
		{
			sqcon=new SqlConnection(System.Configuration.ConfigurationSettings.AppSettings["bbnschool"]);
			sqcon.Open();
		}


// Select Book ID
		public SqlDataReader  showBookID()
		{
	
			sqcom=new SqlCommand ("select Book_ID from Stock_table",sqcon);
			sqred=sqcom.ExecuteReader();
			return sqred;
		}
		public SqlDataReader  showUBookID()
		{
	
			sqcom=new SqlCommand ("select distinct  UBook_ID from uniqueBook where candidate_ID!='0'",sqcon);
			sqred=sqcom.ExecuteReader();
			return sqred;
		}
	


// Insert Book 
		public void InsertItemIssueBook()
		{ 
		
			sqcom=new SqlCommand("proInsertIssueBook",sqcon);
			sqcom.CommandType =CommandType .StoredProcedure ;
			sqcom.Parameters .Add("@CandidateID",CandidateID);
		 
			sqcom.Parameters .Add("@Book_ID",Book_ID);
		 
			sqcom.Parameters .Add("@Date_Of_Issue",Date_Of_Issue);
			sqcom.Parameters .Add("@Return_Date",Return_Date);
		 
			sqcom.ExecuteNonQuery();

		}
//Method for getting the Book information.
		public DataSet ShowIssueBookInformation()
		{
		
			sqdr=new SqlDataAdapter("ProShowIssBookInformation",sqcon);
			ds=new DataSet();
			sqdr.Fill(ds);
			sqcon.Close();
			sqcon.Dispose();
			return ds;

		}

//Method for getting the maximum candidate id from membership table.
		public SqlDataReader  getCandidateIDIssueBook()
		{
		
			sqcom=new SqlCommand ("select max(candidateID) from membership",sqcon);
			sqred=sqcom.ExecuteReader();
			return sqred;
		}
//Method for getting the book information.
		public SqlDataReader  ShowBookonBookID(string str)
		{
		
			sqcom=new SqlCommand (str,sqcon);
			sqred=sqcom.ExecuteReader();
			return sqred;
		}




		// Select Card Number
		public SqlDataReader  getCardNumber()
		{
		
			sqcom=new SqlCommand ("select max(Card_NO) from Card_Generation",sqcon);
			sqred=sqcom.ExecuteReader();
			return sqred;
		}

//Method for getting the quentity of selected book id from stock.
		public SqlDataReader  getQuantity(string sql)
		{
		
			sqcom=new SqlCommand (sql,sqcon);
			sqred=sqcom.ExecuteReader();
			return sqred;
		}

// Show Book Name
		
		public SqlDataReader  selectedBookname()
		{
		
			sqcom=new SqlCommand ("select Book_Name from Stock_table",sqcon);
			sqred=sqcom.ExecuteReader();
			return sqred;
		}


		//for getting the book name.
		public SqlDataReader  Bname()
		{
		
			sqcom=new SqlCommand ("proshowName",sqcon);
			sqcom.CommandType=CommandType .StoredProcedure;
			sqcom.Parameters .Add ("@Book_ID",Book_ID);
          	sqred=sqcom.ExecuteReader();
			return sqred;
		}
// Search For book Where Selected Book ID 
		public void SearchInfo()
		{
	
			sqcom=new SqlCommand ("procsearchB",sqcon);
			sqcom.CommandType =CommandType .StoredProcedure;
			sqcom.Parameters .Add("@Book_ID",Book_ID);
            sqcom.ExecuteReader();
		
		
		}

// Search For Card Number Where Selected CandidateID
		public SqlDataReader  SearchCardNo()
		{
		
			sqcom=new SqlCommand ("procCardNo",sqcon);
			sqcom.CommandType=CommandType .StoredProcedure;
			sqcom.Parameters .Add ("@CandidateID",CandidateID);
			sqred=sqcom.ExecuteReader();
			return sqred;
		}
//getting the issued Book information while returning the book.
		public SqlDataReader  ReturnBookSearch(string sql)
		{
		

			sqcom=new SqlCommand (sql,sqcon);
			 
			 
			 
 			sqred=sqcom.ExecuteReader();
			return sqred;
		}
	
		
//getting the issued Book information while returning the book.		
		public SqlDataReader  ReturnBookSearch( )
		{
		sqcom=new SqlCommand ("SelectReturnBook",sqcon);
		sqcom.CommandType=CommandType .StoredProcedure;
		sqcom.Parameters .Add ("@CandidateID",CandidateID);
		sqred=sqcom.ExecuteReader();
			return sqred;
		}
		
	//Getting the no.of candidate.	
		public SqlDataReader  CandidateCount(string sql)
		{
		sqcom=new SqlCommand (sql,sqcon);
		sqred=sqcom.ExecuteReader();
		return sqred;
		}
//Method for getting the no of card consumed by selected candidate id.		
		public SqlDataReader CardCount(string sql)
		{
			sqcom=new SqlCommand (sql,sqcon);
			sqred=sqcom.ExecuteReader();
			return sqred;
		}
		
		//Method for getting the issued book id for returning the book.
		public SqlDataReader  ReturnBookID(string sql)
		{
		
			sqcom=new SqlCommand (sql,sqcon);
			 
			 
			sqred=sqcom.ExecuteReader();
			return sqred;
		}
//Method for getting the issued book id for returning the book.
		public SqlDataReader  ReturnBook()
		{
		
			sqcom=new SqlCommand ("ProSelectReturnBookCandidate",sqcon);
			sqcom.CommandType=CommandType .StoredProcedure;
			sqred=sqcom.ExecuteReader();
			return sqred;
		}

//Method for deleting the issued book after returning the book by candidate.
		public void  DeleteissueBooks()
		{
		
			sqcom=new SqlCommand ("DeleteReturnBook",sqcon);
			sqcom.CommandType=CommandType .StoredProcedure;
			sqcom.Parameters .Add ("@CandidateID",CandidateID);
			sqcom.Parameters .Add ("@Book_ID",Book_ID);
		 		
			
			sqred=sqcom.ExecuteReader();
			 
		}

//Check whether candidate registered previsly.
		public int CheckPurid()
		{
			
			sqcom=new SqlCommand("select CandidateID from  membership where CandidateID ='"+ CandidateID+"'",sqcon);
			sqred=sqcom.ExecuteReader();
			if(sqred.Read())
			{
				CandidateID=sqred.GetValue(0).ToString().Trim();
				return 0;
			}
			else
			{
				return 1;
			}
			
		}
		
	}
}
